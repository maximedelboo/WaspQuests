{$DEFINE WQ_SOLVESTEPS}
{$IFNDEF WQ_OSR}
  {$I WaspQuests/osr.simba}
{$ENDIF}

procedure SolveInteractNpcStep(var step: TStep);
var
  npcArr: TRSNPCV2Array;
begin
  step.actionSucceeded := False;

  if step.coordinate = [0,0] then step.coordinate := Map.Walker.Position();

  if step.NPC_target.Coordinates = [] then
  begin
    npcArr := NPCs.GetAll(step.NPC_name);
    step.NPC_target := npcArr.findNearest(step.coordinate);
    //Debug(step.NPC_target);
    if step.colors = [] then
      step.NPC_target.Finder.Colors := [CTS2(3504679, 17, 2.17, 2.93)]
    else
      step.NPC_target.Finder.Colors := step.colors;
  end;

  if step.webwalk then
    step.actionSucceeded := step.NPC_target.WalkSelectOption([step.action],5)
  else
    step.actionSucceeded := step.NPC_target.SelectOption([step.action],5);

  if step.actionSucceeded and (step.waitCoord <> [0,0]) then
  begin
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveKillStep(var step: TStep);
var
  npcArr: TRSNPCV2Array;
begin
  step.actionSucceeded := False;

  if step.coordinate = [0,0] then step.coordinate := Map.Walker.Position();

  if step.NPC_target.Coordinates = [] then
  begin
    npcArr := NPCs.GetAll(step.NPC_name);
    step.NPC_target := npcArr.findNearest(step.coordinate);
    //Debug(step.NPC_target);
    if step.colors = [] then
      step.NPC_target.Finder.Colors := [CTS2(3504679, 17, 2.17, 2.93)]
    else
      step.NPC_target.Finder.Colors := step.colors;
  end;

  xpbar.EarnedXP();

  if step.webwalk then
  begin
    step.NPC_target.WalkSelectOption(['Attack'],5);
    if not (step.prayers = []) then Prayer.ActivatePrayer(step.prayers);
  end
  else
  begin
    if not (step.prayers = []) then Prayer.ActivatePrayer(step.prayers);
    step.NPC_target.SelectOption(['Attack'],5);
  end;

  Inventory.open();

  if not WaitUntil(Mainscreen.IsInCombat, 50,6000) then
  begin
    step.actionSucceeded := False;
  end else
  begin
    step.actionSucceeded := True;
    WriteLn('Waiting ', step.CombatTime/1000, ' seconds until out of combat');
    WaitUntil(not Mainscreen.IsInCombat, 50, step.CombatTime);

    if not (step.prayers = []) then Prayer.DisablePrayer(step.prayers);
  end;

  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveInteractObjectStep(var step: TStep);
var
  objArr: TRSObjectV2Array;
begin
  step.actionSucceeded := False;

  if step.coordinate = [0,0] then step.coordinate := Map.Walker.Position();

  if step.objectTarget.Coordinates = [] then
  begin
    objArr := Objects.GetAll(step.objName);
    step.objectTarget := objArr.findNearestSingle(step.coordinate);
    if step.colors = [] then
      step.objectTarget.Finder.Colors := [CTS2(3504679, 17, 2.17, 2.93)]
    else
      step.objectTarget.Finder.Colors := step.colors;
  end;

  //Debug(step.objectTarget);

  try
    if step.webwalk then
      step.actionSucceeded := step.objectTarget.WalkSelectOption([step.action],5)
    else
      step.actionSucceeded := step.objectTarget.SelectOption([step.action],5);
  except WriteLn('Error has occured');
  end;

  if step.waitCoord <> [0,0] then
  begin
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveInteractInventoryStep(var step: TStep);
var
  slots: TIntegerArray;
begin
  step.actionSucceeded := False;
  if not Inventory.IsOpen() then Inventory.Open();
  if not Inventory.ContainsItem(step.item1) then Exit;

  Inventory.FindItem(step.item1, slots);
  step.actionSucceeded := Inventory.ClickSlot(slots[0], [step.action]);
  if step.actionSucceeded and (step.waitCoord <> [0,0]) then
  begin
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveConversationStep(var step: TStep);
var
  i: Integer;
begin
  step.actionSucceeded := False;
  WaitUntil(chat.HasContinue,10,5000);
  Writeln('Starting conversation');
  for i in step.conversationIndices do
    Chat.ChatToNumber(i-1);
  while chat.HasContinue() do
  begin
    chat.ClickContinue(False);
    Wait(0,700,wdLeft);
  end;

  step.actionSucceeded := True;
  if step.actionSucceeded and (step.waitCoord <> [0,0]) then
  begin
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveQueryStep(var step: TStep);
var
  i: Integer;
begin
  step.actionSucceeded := False;
  WaitUntil(chat.HasContinue,10,2000);
  Writeln('Starting conversation');
  for i in step.conversationIndices do
    if Chat.ChatToNumberOrQuery(i-1, step.action, step.answer) then Chat.ChatToNumber(i-1);
  while chat.HasContinue() do
  begin
    chat.ClickContinue(False);
    Wait(0,700,wdLeft);
  end;

  if step.action in Chat.GetQuery then
  begin
    Chat.AnswerQuery(step.action, step.answer, 1500);
    while chat.HasContinue() do
    begin
      chat.ClickContinue(False);
      Wait(0,700,wdLeft);
    end;
  end;
  step.actionSucceeded := True;
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveCombineStep(var step: TStep);
begin
  step.actionSucceeded := False;
  if not Inventory.IsOpen() then Inventory.Open();
  if not Inventory.ContainsItem(step.item1) then Exit;
  if not Inventory.ContainsItem(step.item2) then Exit;

  step.actionSucceeded := Inventory.Use(step.item1,step.item2);
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveLootStep(var step: TStep);
var
  dots: TPointArray;
  dot: TPoint;
  rect: TRectangle;
  clicked: Boolean;
begin
  dots := Minimap.GetItemDots();
  dots.Sort(map.Position);
  for dot in dots do
  begin
    rect := Map.GetTileMS(dot, step.height);
    if Mainscreen.IsVisible(rect.mean) then
    begin
      Mouse.Move(rect.mean, 3, True);
      Wait(100,200);
      Mouse.Click(MOUSE_RIGHT);
      Wait(100,200);
      clicked := ChooseOption.Select(ToString(step.item1));
      if clicked then Break;
      ChooseOption.Close();
    end;
  end;

  if clicked then
    step.actionSucceeded := WaitUntil(Inventory.ContainsItem(step.item1), 50, 5000)
  else
    step.actionSucceeded := False;
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveBankStep(var step: TStep);
var
  bankItem: TRSBankItem;
begin
  step.actionSucceeded := False;
  if inventory.ContainsAll(step.bankItems) and (step.withdrawItems = []) then
  begin
    step.actionSucceeded := True;
    Exit();
  end;

  banks.WalkOpen();
  if not WaitUntil(Bank.IsOpen,100,10000) then Exit();

  if step.depositAll then Bank.DepositAll() else Bank.DepositItems(Step.bankItems, True);
  Wait(1200,3000,wdLeft);
  for bankItem in step.withdrawItems do
    Bank.WithdrawItem(bankItem, False);

  Wait(600,900,wdRight);
  bank.Close;

  step.actionSucceeded := Inventory.ContainsAll(step.withdrawItems);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveWalkStep(var step: TStep);
begin
  if Map.Walker.Position = step.coordinate then
  begin
    step.actionSucceeded := True;
  end else
    Map.Walker.Ladderwalk(step.coordinate);
  WaitUntil(not Minimap.IsPlayerMoving, 50,5000);
  if step.time = 0 then step.time := 5000;

  if (step.waitCoord <> [0,0]) then
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time)
  else
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.coordinate,5),50,step.time);

  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveWaitStep(var step: TStep);
begin
  Wait(step.time, step.time + 600);
  step.actionSucceeded := True;
  if not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveCutsceneStep(var step: TStep);
begin
  step.actionSucceeded := True;
  WaitUntil(Chat.HasContinue, 50,step.time);
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveClickTileStep(var step: TStep);
begin
  step.actionSucceeded := Map.ClickTile(step.coordinate, step.action);
  if step.actionSucceeded and (step.waitCoord <> [0,0]) then
  begin
    step.actionSucceeded := WaitUntil(map.Walker.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if step.actionSucceeded and not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveUseOnNPCStep(var step: TStep);
var
  atpa: T2DPointArray;
  npcArr: TRSNPCV2Array;
  tpa: TPointArray;
  p: TPoint;
begin
  if inventory.GetSelectedSlot <> -1 then inventory.clickslot(inventory.GetSelectedSlot);
  if step.webWalk and (step.coordinate <> [0,0]) then
    Map.Walker.LadderWalk(step.coordinate,10);
  WaitUntil(not Minimap.IsPlayerMoving, 50,5000);

  step.actionSucceeded := inventory.ContainsItem(step.item1);
  if step.actionSucceeded then step.actionSucceeded := Inventory.ClickItem(step.item1, 'Use');

  if step.coordinate = [0,0] then step.coordinate := Map.Walker.Position();

  if step.NPC_target.Coordinates = [] then
  begin
    npcArr := NPCs.GetAll(step.NPC_name);
    step.NPC_target := npcArr.findNearest(step.coordinate);
    if step.colors = [] then
      step.NPC_target.Finder.Colors := [CTS2(3504679, 17, 2.17, 2.93)]
    else
      step.NPC_target.Finder.Colors := step.colors;
  end;

  if step.actionSucceeded then step.actionSucceeded := step.NPC_target.find(atpa);

  tpa := atpa.merge();
  tpa := tpa.grow(5);
  atpa := tpa.Cluster(1);
  tpa := atpa.means();
  for p in tpa do
  begin
    Mouse.Move(p);
    if Mainscreen.IsUpText('-> ' + step.NPC_name) then
    begin
      mouse.click(MOUSE_LEFT);
      step.actionSucceeded := Mainscreen.DidRedClick(600);
      if step.actionSucceeded then break;
    end
    else
      step.actionSucceeded := False;
  end;

  if step.actionSucceeded and (step.waitCoord <> [0,0]) then
  begin
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if step.actionSucceeded and not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveUseOnObjectStep(var step: TStep);
var
  atpa: T2DPointArray;
  objArr: TRSObjectV2Array;
  tpa: TPointArray;
  p: TPoint;
begin
  if inventory.GetSelectedSlot <> -1 then inventory.clickslot(inventory.GetSelectedSlot);
  if step.webWalk and (step.coordinate <> [0,0]) then
    Map.Walker.LadderWalk(step.coordinate, 10);
  WaitUntil(not Minimap.IsPlayerMoving, 50,5000);

  step.actionSucceeded := inventory.ContainsItem(step.item1);
  if step.actionSucceeded then step.actionSucceeded := Inventory.ClickItem(step.item1, 'Use');

  if step.coordinate = [0,0] then step.coordinate := Map.Walker.Position();

  if step.objectTarget.Coordinates = [] then
  begin
    objArr := Objects.GetAll(step.objName);
    step.objectTarget := objArr.findNearestSingle(step.coordinate);
    if step.colors = [] then
      step.objectTarget.Finder.Colors := [CTS2(3504679, 17, 2.17, 2.93)]
    else
      step.objectTarget.Finder.Colors := step.colors;
  end;

  if step.actionSucceeded then step.actionSucceeded := step.objectTarget.find(atpa);

  tpa := atpa.merge();
  tpa := tpa.grow(5);
  atpa := tpa.Cluster(1);
  tpa := atpa.means();
  for p in tpa do
  begin
    Mouse.Move(p);
    if Mainscreen.IsUpText('-> ' + step.objName) then
    begin
      mouse.click(MOUSE_LEFT);
      step.actionSucceeded := Mainscreen.DidRedClick(600);
      if step.actionSucceeded then break;
    end
    else
      step.actionSucceeded := False;
  end;

  if step.actionSucceeded and (step.waitCoord <> [0,0]) then
  begin
    step.actionSucceeded := WaitUntil(map.Position.InRange(step.waitCoord,step.waitRange),50,step.time);
    Wait(1200);
  end;
  if step.actionSucceeded and not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;

procedure SolveCustomStep(var step: TStep);
begin
  step.actionSucceeded := True;
  if step.actionSucceeded and not step.waitItem.IsNull then step.actionSucceeded := WaitUntil(inventory.ContainsItem(step.waitItem), 50, step.time);
  if @step.SpecialEvent <> nil then
    step.SpecialEvent();
  if @step.CompletionCondition <> nil then
    step.completed := step.CompletionCondition()
  else
    step.completed := step.StandardCompletion();
end;
