{$DEFINE WQ_BACKEND}
{$IFNDEF WQ_OSR}
  {$I WaspQuests/osr.simba}
{$ENDIF}

{$I WaspLib/optional/interfaces/mainscreen/anvil.simba}
{$SCOPEDENUMS ON}

var
  questStartIndex: Integer = 0;

procedure TAntiban.Setup(); override;
begin
  Self.Skills := [ERSSkill.TOTAL];
  Self.MinZoom := 0;
  Self.MaxZoom := 25;
  inherited;
end;

function TStatCheck.Check(combatLvl: Int32): Boolean;
begin
  Result := True;
  if combatLvl < self.combat then Exit(False);
  if stats.GetLevel(ERSSkill.ATTACK) < self.attack then Exit(False);
  if stats.GetLevel(ERSSkill.STRENGTH) < self.strength then Exit(False);
  if stats.GetLevel(ERSSkill.DEFENCE) < self.defence then Exit(False);
  if stats.GetLevel(ERSSkill.RANGE) < self.ranged then Exit(False);
  if stats.GetLevel(ERSSkill.PRAYER) < self.prayer then Exit(False);
  if stats.GetLevel(ERSSkill.MAGIC) < self.magic then Exit(False);
  if stats.GetLevel(ERSSkill.RUNECRAFTING) < self.runecraft then Exit(False);
  if stats.GetLevel(ERSSkill.CONSTRUCTION) < self.construction then Exit(False);
  if stats.GetLevel(ERSSkill.HITPOINTS) < self.hitpoints then Exit(False);
  if stats.GetLevel(ERSSkill.AGILITY) < self.agility then Exit(False);
  if stats.GetLevel(ERSSkill.HERBLORE) < self.herblore then Exit(False);
  if stats.GetLevel(ERSSkill.THIEVING) < self.thieving then Exit(False);
  if stats.GetLevel(ERSSkill.CRAFTING) < self.crafting then Exit(False);
  if stats.GetLevel(ERSSkill.FLETCHING) < self.fletching then Exit(False);
  if stats.GetLevel(ERSSkill.SLAYER) < self.slayer then Exit(False);
  if stats.GetLevel(ERSSkill.HUNTER) < self.hunter then Exit(False);
  if stats.GetLevel(ERSSkill.MINING) < self.mining then Exit(False);
  if stats.GetLevel(ERSSkill.SMITHING) < self.smithing then Exit(False);
  if stats.GetLevel(ERSSkill.FISHING) < self.fishing then Exit(False);
  if stats.GetLevel(ERSSkill.COOKING) < self.cooking then Exit(False);
  if stats.GetLevel(ERSSkill.FIREMAKING) < self.firemaking then Exit(False);
  if stats.GetLevel(ERSSkill.WOODCUTTING) < self.woodcutting then Exit(False);
  if stats.GetLevel(ERSSkill.FARMING) < self.farming then Exit(False);
end;

procedure TRSWalkerV2.WalkerTasks(Walker: PRSWalkerV2; Position: TPoint; Destination: TPoint);
begin
  if (Minimap.GetRunEnergy < Random(40,60)) and not Minimap.HasStamina then Inventory.Consume(ERSConsumable.ENERGY);
  if Minimap.GetHPPercent < 80 then Inventory.Consume(ERSConsumable.FOOD);
  Antiban.DoAntiban(False, False);
end;

function EmptyStart(quest: PQuest): Boolean;
begin
  Exit(True);
end;

procedure TQuest.Free();
var
  emptyQuest: TQuest;
begin
  Self := emptyQuest;
end;

procedure TQuestArray.AddQuest(name: String; setup: procedure() of object);
var
  addedQuest: TQuest;
begin
  addedQuest.questName := name;
  addedQuest.SetupProcedure := @setup;
  self += addedQuest;
end;

procedure TQuest.Init(MaxActions: UInt32; MaxTime: UInt64); override;
var
  box: TBox;
  combatLvl: Int32;
begin
  inherited;
  WLSettings.RemoteInput.HUDReport  := False;
  Mouse.Speed                       := Random(20,24);
  Self.DisableDebugging             := False;
  Mouse.Distribution                := MOUSE_DISTRIBUTION_GAUSS;
  if Options.GetBrightnessLevel < 100 then
    Options.SetMaxBrightness;
  Self.PrintTimer.Init(5 * ONE_SECOND);
  Stats.CacheAll();
  combatLvl := combat.GetCombatLevel;
  Self.SetupProcedure();
  if not quest.reqStats.Check(combatLvl) then RaiseException('Required stats are not met');


  options.SetNPCAttackOption(ERSAttackOption.ALWAYS_LEFT_CLICK);

  Self.DebugLn('Setting up map, this can take a second');
  Map.SetupChunks(Quest.region, 8, True);
  NPCs.Setup(Map.NPCs(), @Map.Walker);
  Objects.Setup(Map.Objects(), @Map.Walker);

  map.Walker.OnWaitMovingEvent := @Map.Walker.WalkerTasks;

  for box in Quest.blockingAreas do
    Map.Walker.WebGraph^.BlockInside(box);

  Self.index := QuestStartIndex;
end;

procedure TQuest.Solve();
var
  currentIndex: Integer;
  attempts: Integer;
begin
  attempts := 0;
  while self.index <= high(self.steps) do
  begin
    currentIndex := self.index;
    Self.currentStep := self.steps[currentIndex];
    self.DebugLn('Executing step ' + IntToStr(currentIndex + 1) + ': ' + self.currentStep.name);
    WriteLn(currentStep.step_type);

    WaitUntil(not Minimap.IsPlayerMoving(250),50,5000);

    case currentStep.step_type of
      STEP_TYPE.INTERACT_NPC: SolveInteractNPCStep(currentStep);
      STEP_TYPE.KILL: SolveKillStep(currentStep);
      STEP_TYPE.INTERACT_OBJECT: SolveInteractObjectStep(currentStep);
      STEP_TYPE.INTERACT_INVENTORY: SolveInteractInventoryStep(currentStep);
      STEP_TYPE.CONVERSATION: SolveConversationStep(currentStep);
      STEP_TYPE.QUERY: SolveQueryStep(currentStep);
      STEP_TYPE.COMBINE: SolveCombineStep(currentStep);
      STEP_TYPE.LOOT: SolveLootStep(currentStep);
      STEP_TYPE.BANK: SolveBankStep(currentStep);
      STEP_TYPE.WALK: SolveWalkStep(currentStep);
      STEP_TYPE.WAIT: SolveWaitStep(currentStep);
      STEP_TYPE.CUTSCENE: SolveCutsceneStep(currentStep);
      STEP_TYPE.CLICK_TILE: SolveClickTileStep(currentStep);
      STEP_TYPE.USE_ON_NPC: SolveUseOnNPCStep(currentStep);
      STEP_TYPE.CUSTOM: SolveCustomStep(currentStep);
    end;

    if self.forceQuit then TerminateScript(self.Quitmessage);

    if currentStep.completed then
    begin
      self.index += 1;
      DebugLn('Step Solved, going to next step');
      Wait(1000);
      attempts := 0;
      Continue;
    end else
      attempts += 1;
    DebugLn('Step failed on try ' + IntToStr(attempts));
    Antiban.RandomRotate();
    if attempts > 5 then TerminateScript('Failed to solve step: ' + currentStep.name + ' with index ' + IntToStr(self.index + 1));
  end;
  DebugLn('Quest solved');
end;

procedure TQuest.Run(MaxActions: UInt32; MaxTime: UInt64);
begin
  Self.Init(MaxActions, MaxTime);
  WriteLn('index starting: ', self.Index);
  if (self.index = 0) and not self.StartingConditions(@self) then TerminateScript('Starting conditions not satisfied');
  Self.Solve();
end;
