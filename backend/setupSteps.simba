{$DEFINE WQ_SETUPSTEPS}
{$IFNDEF WQ_OSR}
  {$I WaspQuests/osr.simba}
{$ENDIF}

function TStep.StandardCompletion(): Boolean;
  begin
    Result := Self.actionSucceeded;
  end;

function SetupInteractNpcStep(stepName, NPC_name, action: String; WebWalk: Boolean = True; Coordinate: TPoint = [0,0]; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.INTERACT_NPC;
  Result.name := stepName;
  Result.NPC_name := NPC_name;
  Result.action := action;
  Result.coordinate := coordinate;
  Result.webWalk := WebWalk;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupInteractObjectStep(stepName, objectName, action: String; WebWalk: Boolean = True; Coordinate: TPoint = [0,0]; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.INTERACT_OBJECT;
  Result.name := stepName;
  Result.objName := objectName;
  Result.action := action;
  Result.coordinate := coordinate;
  Result.webWalk := WebWalk;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupConversationStep(stepName: String; conversationIndices: TIntegerArray; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.CONVERSATION;
  Result.name := stepName;
  Result.conversationIndices := conversationIndices;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupQueryStep(stepName: String; conversationIndices: TIntegerArray; query, answer: String; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.QUERY;
  Result.name := stepName;
  Result.action := query;
  Result.answer := answer;
  Result.conversationIndices := conversationIndices;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupInteractInventoryStep(stepName: String; item: TRSItem; action: String; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.INTERACT_INVENTORY;
  Result.name := stepName;
  Result.item1 := item;
  Result.action := action;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupLootStep(stepName: String; item: TRSItem; height: Double = 0; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.LOOT;
  Result.name := stepName;
  Result.item1 := item;
  Result.height := height;
  Result.CompletionCondition := @CompletionCondition;;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupCombineStep(stepName: String; item1, item2: TRSItem; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.COMBINE;
  Result.name := stepName;
  Result.item1 := item1;
  Result.item2 := item2;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupBankStep(stepName: String; withdrawItems: TRSBankItemArray; depositAll: Boolean = False; bankItems: TRSItemArray = []; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.BANK;
  Result.name := stepName;
  Result.bankItems := bankItems;
  Result.withdrawItems := withdrawItems;
  Result.depositAll := depositAll;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupKillStep(stepName, NPC_name: String; time: Integer = 7000; WebWalk: Boolean = True; Coordinate: TPoint = [0,0]; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.KILL;
  Result.name := stepName;
  Result.NPC_name := NPC_name;
  Result.CombatTime := time;
  Result.coordinate := coordinate;
  Result.webWalk := WebWalk;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupWalkStep(stepName: String; Coordinate: TPoint; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.WALK;
  Result.name := stepName;
  Result.coordinate := coordinate;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupWaitStep(stepName: String; time: Integer; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.WAIT;
  Result.name := stepName;
  Result.time := time;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupCutsceneStep(stepName: String; maxTime: Integer; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.CUTSCENE;
  Result.name := stepName;
  Result.time := maxTime;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupClickTileStep(stepName: String; Coordinate: TPoint; Action: String = ''; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.CLICK_TILE;
  Result.name := stepName;
  Result.coordinate := coordinate;
  Result.action := Action;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupUseOnNPCStep(stepName: String; item: TRSItem; npcName: String; WebWalk: Boolean = False; Coordinate: TPoint = [0,0]; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.USE_ON_NPC;
  Result.name := stepName;
  Result.item1 := item;
  Result.NPC_name := npcName;
  Result.webWalk := WebWalk;
  Result.coordinate := Coordinate;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupUseOnObjectStep(stepName: String; item: TRSItem; objectName: String; WebWalk: Boolean = False; Coordinate: TPoint = [0,0]; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.USE_ON_OBJECT;
  Result.name := stepName;
  Result.item1 := item;
  Result.objName := objectName;
  Result.webWalk := WebWalk;
  Result.coordinate := Coordinate;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

function SetupCustomStep(stepName: String; CompletionCondition: TStepCompletion = nil; SpecialEvent: TStepEvent = nil): TStep;
begin
  Result.step_type := STEP_TYPE.CUSTOM;
  Result.name := stepName;
  Result.CompletionCondition := @CompletionCondition;
  Result.SpecialEvent := @SpecialEvent;
end;

procedure TStep.CustomizeNPC(npc: TRSNPCV2);
begin
  self.NPC_target := npc;
end;

procedure TStep.CustomizeObject(obj: TRSObjectV2);
begin
  self.objectTarget := obj;
end;

procedure TStep.CustomizeColor(colorarray: TCTS2ColorArray);
begin
  self.colors := colorarray;
end;

procedure TStep.CustomWaitTile(coord: TPoint; waitRange: Integer = 5; waitTime: Integer = 10000);
begin
  self.waitCoord := coord;
  self.waitRange := waitRange;
  self.time := WaitTime;
end;

procedure TStep.CustomWaitItem(item: TRSItem; maxTime: Integer = 5000);
begin
  self.waitItem := item;
  self.time := maxTime;
end;

procedure TStep.CustomPrayerArray(prayerArray: ERSPrayerArray);
begin
  self.prayers := prayerArray;
end;

function SetupNPC(name: String; coordinate: TPoint; colorArray: TCTS2ColorArray = [[3504679, 17, 2.17, 2.93]]): TRSNPCV2;
begin
  Result.SetupCoordinates([28],[coordinate]);
  Result.Walker := @Map.Walker;
  Result.SetupUpText(name);
  Result.finder.Colors := colorArray;
  Result.Size := [0.8,0.8,5];
end;



